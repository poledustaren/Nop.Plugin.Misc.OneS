--- ImportOneS.cs
+++ ImportOneS.cs
@@ -1,8 +1,10 @@
 ﻿using System;
 using System.Collections.Generic;
+using System.Globalization;
 using System.Linq;
 using System.Xml.Linq;
 using Nop.Plugin.Misc.OneS.Models;
+using Nop.Services.Logging;
 
 namespace Nop.Plugin.Misc.OneS.Core.ImportProducts
 {
@@ -16,27 +18,30 @@
         };
         
         private readonly IImportOneSImpl _importOneSImpl;
+        private readonly ILogger _logger;
 
-        public ImportOneS(IImportOneSImpl importOneSImpl)
+        public ImportOneS(IImportOneSImpl importOneSImpl, ILogger _logger)
         {
-           
             _importOneSImpl = importOneSImpl;
-        }
-
-        public bool ImportAllProducts(string path)
-        {
-            if (!CheckXmlRootElement(path, "products")) return false;
-            var importEntities = ParseXml(path);
-            _importOneSImpl.ImportAllEntities(importEntities);
-            return true;
+            this._logger = _logger;
         }
 
         public bool ImportProductStorages(string path)
         {
-            if (!CheckXmlRootElement(path, "productschanged")) return false;
-            var importEntities = ParseXml(path);
-            _importOneSImpl.ImportStoragesEntities(importEntities);
-            return true;
+            if (CheckXmlRootElement(path, "productsavtomasla"))
+            {
+                var importEntities = ParseXml(path);
+                _importOneSImpl.ImportStoragesEntities(importEntities);
+                return true;
+            }
+            if (CheckXmlRootElement(path, "products"))
+            {
+                var importEntities = ParseXml(path);
+                _importOneSImpl.ImportAllEntities(importEntities);
+                return true;
+            }
+            return false;
+            
         }
 
         private ImportEntity[] ParseXml(string path)
@@ -44,9 +49,6 @@
             var root = OpenXml(path);
 
             var oilRoot = root.Element("Oils");
-            if (oilRoot == null)
-                throw new Exception("No Oils element");
-
             var oils = oilRoot.Elements("Oil");
             ImportEntity[] importEntities = ParseOil(oils).ToArray();
 
@@ -55,31 +57,42 @@
 
         private List<ImportEntity> ParseOil(IEnumerable<XElement> oils)
         {
-            var importEntities = new List<ImportEntity>();
-            foreach (var oil in oils)
-            {
-                var importEntity = new ImportEntity
+            
+                var importEntities = new List<ImportEntity>();
+                foreach (var oil in oils)
                 {
-                    BrandSku = (string)oil.Attribute("Brand.Id"),
-                    BrandName = (string)oil.Attribute("Brand"),
-                    ModelSku = (string)oil.Attribute("Id"),
-                    ModelName =(string)oil.Attribute("Brand")+" "+(string)oil.Attribute("Title")
-                };
 
-                var modelRoot = oil.Element("Models");
-                if (modelRoot == null)
-                    throw new Exception("No models in oils");
+                    var importEntity = new ImportEntity
+                    {
+                        BrandSku = (string)oil.Attribute("Brand.Id"),
+                        BrandName = (string)oil.Attribute("Brand"),
+                        ModelSku = (string)oil.Attribute("Id"),
+                        ModelName = (string)oil.Attribute("Title")
+                    };
+                    try
+                    {
 
-                var models = modelRoot.Elements("Model");
-                
-                foreach (var model in models)
-                {
-                    ParseModel(importEntity, model);
-                    importEntities.Add(importEntity.CloneObject());
+                        var modelRoot = oil.Element("Models");
+                        if (modelRoot == null)
+                            throw new Exception("No models in oils");
+
+                        var models = modelRoot.Elements("Model");
+
+                        foreach (var model in models)
+                        {
+                            ParseModel(importEntity, model);
+                            importEntities.Add(importEntity.CloneObject());
+                        }
+                    }
+                    catch (Exception e)
+                    {
+                        _logger.Error(importEntity.ProductSku, e);
+                        throw;
+                    }
+                   
                 }
-            }
-            
-            return importEntities;
+
+                return importEntities;
         }
        
         private void ParseModel(ImportEntity importEntity, XElement model)
@@ -98,7 +111,8 @@
             {
                 Name = "Производитель",
                 Value = importEntity.BrandName
-            };      
+            };
+      
             var productSpecifications = _productSpecifiactionMapping.Select(i => GetProductSpecification(model, i)).ToList();
             productSpecifications.Add(brandSpecification);
             importEntity.ProductSpecifications = productSpecifications.ToArray();
@@ -121,27 +135,40 @@
             };
         }
 
-        private static ProductStorage GetProductStorage(XElement storage)
+        private ProductStorage GetProductStorage(XElement storage)
         {
+            
             var nicePrice = NicePrice(storage);
             var name = (string) storage.Attribute("Storage");
-            var price = Convert.ToDecimal(nicePrice);
-            var quantity = Convert.ToInt32((string) storage.Attribute("Quantity"));
+            Int32 quantity;
+            int.TryParse((string)storage.Attribute("Quantity"), out quantity);
 
             return new ProductStorage()
             {
                 Name = name,
-                Price = price,
+                Price = nicePrice,
                 Quantity = quantity
             };
         }
 
-        private static string NicePrice(XElement storage)
+        private decimal NicePrice(XElement storage)
         {
-            var notNicePrice = (string) storage.Attribute("Price");
-            var nicePrice = String.Join("", notNicePrice.Where(c => !char.IsWhiteSpace(c)));
-            nicePrice = nicePrice.Replace(",", ".");
-            return nicePrice;
+            var notNicePrice = (string)storage.Attribute("Price"); 
+            try
+            {
+                decimal nicePrice;// String.Join("", notNicePrice.Where(c => !char.IsWhiteSpace(c)));
+                //nicePrice = nicePrice.Replace(",", ".");
+
+                Decimal.TryParse(notNicePrice, NumberStyles.Currency, CultureInfo.InvariantCulture, out nicePrice);
+                return nicePrice;
+
+            }
+            catch (Exception e)
+            {
+                _logger.Error(notNicePrice, e);
+                throw;
+            }
+           
         }
 
         private XElement OpenXml(string path)
@@ -152,6 +179,9 @@
         private bool CheckXmlRootElement(string path,string rootElement)
         {
             var root = OpenXml(path);
+            var oilRoot = root.Element("Oils");
+            if (oilRoot == null)
+                return false;
             if (root.Name.ToString().ToLower() == rootElement)
                 return true;
             return false;
