--- ImportOneSImpl.cs
+++ ImportOneSImpl.cs
@@ -64,7 +64,10 @@
                 if (importEntity.IsDeleted)
                 {
                     var product = _productService.GetProductBySku(importEntity.ProductSku);
-                    _productService.DeleteProduct(product);
+                    if (product!=null)
+                    {
+                        _productService.DeleteProduct(product);
+                    }
                 }
                 else
                 {
@@ -83,11 +86,9 @@
             foreach (var product in allProductDisplayedOnHomePage)
             {
                 var checkProductFromBaseInXml = allProductFromXml.FirstOrDefault(x => x.Equals(product.Name));
-                if (checkProductFromBaseInXml == null)
-                {
-                    product.Published = false;
-                    _productService.UpdateProduct(product);
-                }
+                if (checkProductFromBaseInXml != null) continue;
+                product.Published = false;
+                _productService.UpdateProduct(product);
             }
         }
 
@@ -111,8 +112,9 @@
                     _productAttributeService.GetProductVariantAttributesByProductId(product.Id).FirstOrDefault();
                 var productVariantValueGet =
                     _productAttributeService.GetProductVariantAttributeValues(productVariantGetForValue.Id);
+                var productVariantAttr = productVariantValueGet.FirstOrDefault(x => x.Name.Equals(entity.Name));
 
-                if (!productVariantValueGet.Any())
+                if (productVariantAttr == null)
                 {
                     var productVariantAttributeValue = new ProductVariantAttributeValue();
                     var productVariantAttributeForMap =
@@ -123,10 +125,16 @@
                             ? productVariantAttributeForMap.Id
                             : new int();
                     productVariantAttributeValue.Name = entity.Name;
-                    productVariantAttributeValue.IsPreSelected = true;
+                    productVariantAttributeValue.IsPreSelected = entity.Name == "Berikolesa.RU";
+
                     _productAttributeService.InsertProductVariantAttributeValue(
                         productVariantAttributeValue);
                 }
+                else
+                {
+                    productVariantAttr.IsPreSelected = entity.Name == "Berikolesa.RU";
+                    _productAttributeService.UpdateProductVariantAttributeValue(productVariantAttr);
+                }
 
                 //связываем продукт и значения свойств
                 var productVariantAttributeCombinationsGet =
@@ -135,10 +143,12 @@
                 var productVariantAttributeValueForXml=_productService.GetProductBySku(importEntity.ProductSku)
                     .ProductVariantAttributes.FirstOrDefault()
                     .ProductVariantAttributeValues.FirstOrDefault(x => x.Name.Equals(entity.Name));
+                var productVariantAttributeCombination = productVariantAttributeCombinationsGet.FirstOrDefault(
+                         x => x.Sku.Equals(entity.Name));
 
-                if (!productVariantAttributeCombinationsGet.Any())
+                if (productVariantAttributeCombination==null)
                 {
-                    var productVariantAttributeCombination = new ProductVariantAttributeCombination();
+                    productVariantAttributeCombination = new ProductVariantAttributeCombination();
                     var productXml = "<Attributes><ProductVariantAttribute ID='" +
                                      productVariantAttributeValueForXml.ProductVariantAttributeId +
                                      "'><ProductVariantAttributeValue><Value>" +
@@ -156,8 +166,7 @@
                 }
                 else
                 {
-                    var productVariantAttributeCombination = productVariantAttributeCombinationsGet.FirstOrDefault(
-                        x => x.Sku.Equals(entity.Name));
+                    
                     productVariantAttributeCombination.StockQuantity = entity.Quantity;
                     productVariantAttributeCombination.OverriddenPrice = entity.Price;
                     _productAttributeService.UpdateProductVariantAttributeCombination(productVariantAttributeCombination);
@@ -183,9 +192,11 @@
 
                     var productSpecifications =
                         _productService.GetProductBySku(importEntity.ProductSku).ProductSpecificationAttributes;
+                    
+                    
                     var productSpecificationAttributeOption =
                         productSpecifications.FirstOrDefault(
-                            x => x.SpecificationAttributeOptionId.Equals(productSpecificationAttribute.OptionId));
+                            x => x.SpecificationAttributeOption.SpecificationAttributeId.Equals(productSpecificationAttribute.SpecificationId));
 
                     if (productSpecificationAttributeOption == null)
                     {
@@ -195,6 +206,7 @@
                     {
                         _specificationAttributeService.DeleteProductSpecificationAttribute(
                             productSpecificationAttributeOption);
+                       
                         ProductSpecificationAttributeOptionMapping(productFromBase, productSpecificationAttribute);
                     }
                 }
@@ -261,6 +273,7 @@
                     specificationAttribute = new SpecificationAttribute();
                     specificationAttribute.Name = entity.Name;
                     specificationAttribute.DisplayOrder = 0;
+                    
                     _specificationAttributeService.InsertSpecificationAttribute(specificationAttribute);
                     MappingAttributeSpecificationOption(entity, specificationAttribute);
                     throw new Exception("Unknown specificationAttribute ");
@@ -293,10 +306,13 @@
         {
             var product = _productService.GetProductBySku(importEntity.ProductSku);
             var parentProduct = _productService.GetProductBySku(importEntity.ModelSku);
+
             var storage = importEntity.Storages.FirstOrDefault(x => x.Name.Equals("Berikolesa.RU"));
             if (product == null)
             {
+
                 product = CreateSimpleProduct(importEntity.ProductSku, importEntity.ProductName);
+                product.Published = storage.Quantity > 0&&storage.Price>0;
                 product.ParentGroupedProductId = parentProduct.Id;
                 product.Price = storage.Price;
                 _productService.InsertProduct(product);
@@ -312,12 +328,13 @@
                 product.UpdatedOnUtc = DateTime.UtcNow;
                 product.ProductType = ProductType.SimpleProduct;
                 product.VisibleIndividually = true;
-                product.Published = true;
+                product.Published = storage.Quantity > 0 && storage.Price > 0;
                 product.ProductTemplateId = 1;
                 product.ManageInventoryMethod = ManageInventoryMethod.ManageStockByAttributes;
                 product.OrderMinimumQuantity = 1;
                 product.OrderMaximumQuantity = 100;//TODO: тут нужно смотреть количество из 1с
                 product.Price = storage.Price;
+                product.IsShipEnabled = true;
                 _productService.UpdateProduct(product);
             }
         }
